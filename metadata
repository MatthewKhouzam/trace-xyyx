/* CTF 1.8 */

typealias integer { size = 8; align = 8; signed = false; } := uint8_t;
typealias integer { size = 16; align = 8; signed = false; } := uint16_t;
typealias integer { size = 32; align = 8; signed = false; } := uint32_t;
typealias integer { size = 64; align = 8; signed = false; } := uint64_t;

trace {
	major = 1;
	minor = 8;
	uuid = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa";
	byte_order = le;
	packet.header := struct {
		uint32_t magic;
		uint8_t  uuid[16];
		uint32_t stream_id;
	};
};

env {
    domain = "ust";
};

clock {
	name = monotonic;
	uuid = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa";
	description = "Monotonic Clock";
	freq = 1000000000; /* Frequency, in Hz */
	/* clock value offset from Epoch is: offset * (1/freq) */
	offset = 0;
};

typealias integer {
	size = 32; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint32_clock_monotonic_t;

typealias integer {
	size = 64; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint64_clock_monotonic_t;

struct packet_context {
	uint64_clock_monotonic_t timestamp_begin;
	uint64_clock_monotonic_t timestamp_end;
	uint64_t content_size;
	uint64_t packet_size;
	uint64_t events_discarded;
	uint32_t cpu_id;
};

struct event_header {
	uint8_t id;
	uint64_t timestamp;
} align(8);


stream {
	id = 0;
	packet.context := struct packet_context;
	event.header := struct event_header;
};

event {
	name = "fast:func_entry";
	id = 0;
	stream_id = 0;
	loglevel = 12;
	fields := struct {
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } addr;
        integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } vtid;
        integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } vpid;
	};
};

event {
	name = "fast:func_exit";
	id = 1;
	stream_id = 0;
	loglevel = 12;
	fields := struct {
        integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } vtid;
        integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } vpid;
	};
};
